%!PS

% PSStringThing - An add function over strings of numbers in PostScript
% Copyright (C) 2022  Simon Wendel
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

/testsPassed 0 def
/testsFailed 0 def

/str {              % <any> str <string>
    20 string cvs
} bind def

/shouldBe {         % <msg:string> <this:any> <that:any> shouldBe -
    str /that exch def
    str /this exch def

    this that eq
    {
        testsPassed 1 add /testsPassed exch store
        (Pass: )
    } {
        testsFailed 1 add /testsFailed exch store
        (Fail: )
    } ifelse print

    print % <msg>
    [ ( <) this (>=<) that (>) ] { print } forall
    (\n) print
} bind def

/runTests {
    /testCases exch def
    /totalCases testCases length str  def

    (\n======== TEST CASES ========\n) print
    testCases { exec } forall

    (\n========== RESULTS =========\n) print
    [ (Successful tests:    ) testsPassed str (/) totalCases (\n) ]
    { print } forall

    [ (Failed tests:        )  testsFailed str (/) totalCases (\n) ]
    { print } forall

    (\n) print
} bind def